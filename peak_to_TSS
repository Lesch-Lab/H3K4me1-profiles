#usage:python [script.py] [peak_call_bed_file] [TSS_list] [output_name]

import sys, os
import numpy as np

f_chip = sys.argv[1]
f_tss = sys.argv[2]
f_name = sys.argv[3]

#open output file
f_w = file(f_name, 'w')
f_w.write('chr_no   peak_s  peak_e  dist_1  gene_1  dist_2  gene_2  dist_3  gene_3\n')

#open input file
f_c = file(f_chip, 'r')
f_t = file(f_tss, 'r')

#initialize lists
l_c = []
l_t = []

#create list of all TSS
for line in f_t:
    tmp = line.split()
    if tmp[1]=='start':continue
    chrm = tmp[0]
    gen_n = tmp[4]
    sense = tmp[-2]
    p_c = int(tmp[-1])
    l_t.append([p_c, chrm, gen_n, sense])

#create list of all peaks called
for line in f_c:
    tmp = line.split()
    chrm = tmp[0]
    sta = tmp[1]
    end = tmp[2]
    if len(chrm.split('_'))>3:continue
    l_c.append([sta, end, chrm])

#find the nearest TSS and calc distance
for i in range(len(l_c)):
    min_d = 0
    min_inx = []
    for j in range(len(l_t)):
        dist = 0
        if l_c[i][2] != l_t[j][1]: continue
        s1 = int(l_c[i][0])
        e1 = int(l_c[i][1])
        sense = int(l_t[j][3])
        p_c2 = int(l_t[j][0])
        p_c1 = (s1+e1)/2 #peak center
        dist = (p_c2 - p_c1)*sense*-1
        if (len(min_inx)<4): 
            min_inx.append([l_t[j][2], dist])
            min_inx = sorted(min_inx, key=lambda row: np.abs(row[1]), reverse=True)
            min_d = abs(min_inx[-1][1])
        else:
            if min_d < abs(dist): continue
            min_d = abs(dist)
            min_inx.append([l_t[j][2], dist]) #for peak, measure from center	
    n_1 = 'n/a'
    n_2 = 'n/a'
    n_3 = 'n/a'
    g_1=  'n/a'
    g_2 = 'n/a'
    g_3 = 'n/a'
    if len(min_inx)>2:
        n_1 = min_inx[-1][1]
        g_1 = min_inx[-1][0]
        n_2 = min_inx[-2][1]
        g_2 = min_inx[-2][0]
        n_3 = min_inx[-3][1]
        g_3 = min_inx[-3][0]
    elif len(min_inx)==2:
        n_1 = min_inx[-1][1]
        g_1 = min_inx[-1][0]
        n_2 = min_inx[-2][1]
        g_2 = min_inx[-2][0]
    elif len(min_inx)==1:
        n_1 = min_inx[-1][1]
        g_1 = min_inx[-1][0]
    elif len(min_inx)==0: continue
    f_w.write('%s	%8d	%8d	%8s	%8s	%8s	%8s	%8s	%8s\n' %(l_c[i][2], int(l_c[i][0]), int(l_c[i][1]),n_1,g_1,n_2,g_2,n_3,g_3))
